
Section 14: Writing to a File
------------------------------------------------------------------------------------

Writing Characters to a Text File

	- the simplest write operation is provided by the function fputc()

		+ writes a single character to a text file

		int fputc(int ch, FILE *pfile);

	- the function writes the character specified by the first argument
	  to the file identified by the second argument (file pointer)

		+ returns the character that was written if successful
		
		+ return EOF if failure

	- in practice, characters are not usually written to a physical 
	  file one by one

		+ extremely inefficient

	- the putc() function is equivalent to fputc()

		+ requires the same arguments and the return type is the
		  same

		+ difference between them is that putc() may be 
		  implemented in the standard library as a macro, whereas
		  fputc() is a function


Example 1

#include <stdio.h>

int main(void) {

	FILE *fp;
	int ch;

	fp = fopen("write_test.txt", "w+");

	for(ch = 33; ch <= 100; ch++) {
		fputc(ch, fp);
	}

	fclose(fp);
	
	return 0;
}


Writing a String to a Text File

	- you can use the fputs() function to write to any
	  file or stream

	int fputs(const char * str, FILE * pfile);

	- the first argument is a pointer to the character
	  string that is to be written to the file

	- the second argument is the file pointer

	- this function will write characters from a string
	  until it reaches a '\0' character

		+ does not write the null terminator character
		  to the file

		+ can complicate reading back variable-length
	 	  strings from a file that has been written
		  by fputs()

		+ expecting to write a line of text that has
		  a newline character at the end


Example 2

#include <stdio.h>

int main(void) {

	FILE * file_pointer;

	file_pointer = fopen("write_file_test2.txt", "w+");

	fputs("This is Jason Fedin's course.", file_pointer);
	fputs("I am happy to be here.", file_pointer);

	fclose(file_pointer);

	return 0;
}


Writing Formatted Output to a File

	- the standard function for formatted output to a
	  stream is fprintf()

	int fprint(FILE *stream, const char * format, ...)

	- the first argument to this function is the 
	  pointer to a FILE object that identifies the
	  stream

	- the second argument to this function is the format

		+ a C string that contains one or more of the
		  following items

			- whitespace character
	
			- non-whitespace character

			- format specifiers

			- usage is similar to printf, but to
			  a file


Example 3

#include <stdio.h>
#include <stdlib.h>

int main(void) {

	FILE *fp = NULL;

	fp = open("write_file_test3", "w+");
	
	if(fp != NULL)
		fprintf(fp, "%s %s %s %s %d", "Hello", "my", "number", "is", 555);

	fclose(fp);

	return 0;
}





