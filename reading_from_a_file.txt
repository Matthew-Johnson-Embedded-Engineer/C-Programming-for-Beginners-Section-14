
Section 14: Reading from a File
-----------------------------------------------------------------------------------------------------------------

Reading Characters from a Text File

	- the fgetc() function reads a character from a text file
	  that has been opened for reading 

	- takes a file pointer as its only argument and returns
	  the character read as type int

	int mchar = fgetc(pfile); // reads a character into mchar with pfile a File pointer

	- the mchar is type int because EOF will be returned if 
	  the end of the file has been reached

	- the function getc(), which is equivalent to fgetc(), 
	  is also available

		+ requires an argument of type FILE* and returns
		  the character read as type int

		+ virtually identifical to fgetc()

		+ only difference between them is that getc()
		  may be implemented as a macro, whereas fgetc()
		  is a function

	- you can read the contents of a file again when 
	  necessary

		+ the rewind() function positions the file that
		  is specified by the file pointer argument at
		  the beginning

	rewind(pfile);


Reading a String from a Text File

	- you can use the fgets() function to read from any file
	  or stream

	char *fgets(char *str, int nchars, FILE *stream)

	- the function reads a string into the memory area 
	  pointed to by str, from the file specified by stream

		+ characters are read until either a '\n' is
		  read or nchars - 1 characters have been read
		  from the stream, whichever occurs first

		+ if a newline character is read, it's retained
		  in the string
		
			- a '\0' character will be appended to
			  the end of the string

		+ if there is no error, fgets() returns the 
		  pointer, str

		+ if there is an error, NULL is returned

		+ reading EOF causes NULL to be returned


Example 2

#inlcude <stdio.h>

int main(void) {

	FILE *fp;
	char str[60];
	
	// open file for reading
	fp = fopen("test_file2.txt", "r");

	if(fp == NULL) {

		perror("Error opening file.");
		return -1;
	}

	if(fgets(str, 60, fp) != NULL) {

		// write content to stdout
		printf("%s", str);
	}

	fclose(fp);
	fp = NULL:
	return 0;
}




